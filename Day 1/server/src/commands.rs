use std::ops::{Deref, DerefMut};


use tokio::sync::MutexGuard;

use crate::{ClientList, input, models::Client};
pub async fn sessions(args: &[String], clients: &mut ClientList) {
    if args.len() == 0 {
        println!("Sessions:");
        for (index, client) in clients.lock().await.deref().iter().enumerate() {
            println!("{} - {}", index, client.addr);
        }
    } else {
        match args[0].to_lowercase().as_str() {
            "i" | "interact" =>  {
                if let Some(session_number) = args.get(1) {
                    interact(session_number.parse().unwrap(), clients).await;
                }
                
            }
            _ => {
                //
            }
        }
    }
}

async fn interact(session_number: u32, clients: &mut ClientList) {
    let mut client = clients.lock().await;
    loop {
        match input("Shell: ".to_string()).await {
            Some(cmd) => {
                if cmd.starts_with(":") {
                    let cmd = cmd[1..].to_string();
                    match shell_commands(&cmd, &mut client, session_number) {
                        Ok(_) => {continue}
                        Err(_) => break
                    }
                }
                
                let client = client.deref_mut().get_mut(session_number as usize).unwrap();
                client.write(cmd.as_bytes()).await;
                let incoming = client.read().await;
                println!("{}", String::from_utf8(incoming).unwrap());
                
            }   
            None => {continue;}
        }
    }
}

fn shell_commands(cmd: &String, clients: &mut MutexGuard<Vec<Client>>, session_number: u32) -> Result<(), ()> {
    match cmd.to_lowercase().as_str().trim() {
        "b" | "back" => {
            Err(())
        }
        "e" | "exit" => {
            clients.deref_mut().remove(session_number as usize);
            Err(())
        }
        _ => {
            Ok(())
        }
    }
}